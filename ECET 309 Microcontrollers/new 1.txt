void Init_ECTInterrupts(void)
{
	
}
void interrupt ECTOutputCompareHandler(void)
{
	ECT_TFLG1_C1F = 1; 			   //set the flag for channel 1 to be cleared
	ECT_TC1 = ECT_TCNT + offSetVar; //load compare resister with new compare value clock
								   //timer trigger at new value
	if(interCnt % 50 == 0) five_ms_counter++;  //where ? would be replaced with a value
	if(interCnt % 125 == 0) ten_ms_counter++;
	if(interCnt % ? == 0) twenty_ms_counter++;
	if(interCnt >= ?) interCnt = 0; //reset the interCnt
	interCnt++; //increase timer interrupt counter
}

void RunTaskScheduler(void)
{
	BusProcess(); /*run as much as the processor can*/
	
	if(five_ms_counter > 0)
	{
		five_ms_counter--;
		ButtonProcess();
	}
	if(ten_ms_counter > 0)
	{
		ten_ms_counter--;
		CDProcess();
	}
	if(twenty_ms_counter > 0)
	{
		twenty_ms_counter--;
		CDChangerProcess();
		PhoneProcess();
	}
}


volatile unsigned int offSetVar = 16000;

2ms/ (1/8mHz)
2E^-3/0.125


Task1

tasktime/basetime = -0.1sec/2E^-3 =50

Task2
.25/2E^-3 = 125


EnableGlogbalInterrupts;

ECT_TSCR1_TEN = 1;

ECT_TC1 += offSetVar

ECT_TIOS_IOS1

ECT_TIE_C1I 



void interrupt myVeryFunInterrupt()
{
	if(interCnt % 50) == 0)
	{
		hundredMSCounter++;
	}
	if(interCnt % 125) == 0)
	{
		someStrangVarName++;
	}
	interCnt++;
}



Taks.c

toggle LEDs

void LED0()
{
	//toggle LED0
}

void LED1()
{
	//toggle LED1
}

void LED2 ()
{
	//toggle LED2
}



if(hundredMSCounter >0)
{
	hundredMSCounter--;
	//call the funcction
	LED0();
}

if(someStrangVarName >0)
{
	someStrangVarName--;
	//call funcction
	LED1();
}

if(? >0)
{
	?--;
	LED2();
}
